import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface CodeSession {
  id: string;
  title: string;
  code: string;
  language: 'javascript' | 'typescript' | 'jsx' | 'tsx';
  createdAt: Date;
  updatedAt: Date;
}

interface PlaygroundState {
  // Chat state
  messages: ChatMessage[];
  isLoading: boolean;
  
  // Code state
  currentCode: string;
  currentLanguage: 'javascript' | 'typescript' | 'jsx' | 'tsx';
  sessions: CodeSession[];
  activeSessionId: string | null;
  
  // Actions
  addMessage: (message: Omit<ChatMessage, 'id' | 'timestamp'>) => void;
  setLoading: (loading: boolean) => void;
  updateCode: (code: string) => void;
  setLanguage: (language: 'javascript' | 'typescript' | 'jsx' | 'tsx') => void;
  createSession: (title: string) => void;
  loadSession: (sessionId: string) => void;
  updateSession: (sessionId: string, updates: Partial<CodeSession>) => void;
  deleteSession: (sessionId: string) => void;
  clearMessages: () => void;
}

export const usePlaygroundStore = create<PlaygroundState>()(
  persist(
    (set, get) => ({
      // Initial state
      messages: [],
      isLoading: false,
      currentCode: `// Welcome to AI Playground
// Start chatting with AI to generate React components

export default function MyComponent() {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">Hello World!</h1>
      <p>Generated by AI</p>
    </div>
  );
}`,
      currentLanguage: 'tsx',
      sessions: [],
      activeSessionId: null,

      // Actions
      addMessage: (message) => {
        const newMessage: ChatMessage = {
          ...message,
          id: Math.random().toString(36).substr(2, 9),
          timestamp: new Date(),
        };
        set((state) => ({
          messages: [...state.messages, newMessage],
        }));
      },

      setLoading: (loading) => set({ isLoading: loading }),

      updateCode: (code) => {
        set({ currentCode: code });
        const { activeSessionId, sessions } = get();
        if (activeSessionId) {
          const updatedSessions = sessions.map((session) =>
            session.id === activeSessionId
              ? { ...session, code, updatedAt: new Date() }
              : session
          );
          set({ sessions: updatedSessions });
        }
      },

      setLanguage: (language) => set({ currentLanguage: language }),

      createSession: (title) => {
        const newSession: CodeSession = {
          id: Math.random().toString(36).substr(2, 9),
          title,
          code: get().currentCode,
          language: get().currentLanguage,
          createdAt: new Date(),
          updatedAt: new Date(),
        };
        set((state) => ({
          sessions: [...state.sessions, newSession],
          activeSessionId: newSession.id,
        }));
      },

      loadSession: (sessionId) => {
        const session = get().sessions.find((s) => s.id === sessionId);
        if (session) {
          set({
            activeSessionId: sessionId,
            currentCode: session.code,
            currentLanguage: session.language,
          });
        }
      },

      updateSession: (sessionId, updates) => {
        set((state) => ({
          sessions: state.sessions.map((session) =>
            session.id === sessionId
              ? { ...session, ...updates, updatedAt: new Date() }
              : session
          ),
        }));
      },

      deleteSession: (sessionId) => {
        set((state) => ({
          sessions: state.sessions.filter((s) => s.id !== sessionId),
          activeSessionId: state.activeSessionId === sessionId ? null : state.activeSessionId,
        }));
      },

      clearMessages: () => set({ messages: [] }),
    }),
    {
      name: 'playground-storage',
    }
  )
);
